basePath: /
definitions:
  domain.Role:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  dtos.CreateRoleInputDTO:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  dtos.CreateRoleOutputDTO:
    properties:
      id:
        type: string
    type: object
  dtos.CreateUserInputDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dtos.CreateUserOutputDTO:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dtos.LoginInputDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dtos.UpdateRoleInputDTO:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  dtos.UpdateRoleOutputDTO:
    properties:
      id:
        type: string
    type: object
  dtos.UpdateUserInputDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dtos.UpdateUserOutputDTO:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a auth managing API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Veritas API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with the input payload
      parameters:
      - description: Login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              token:
                type: string
            type: object
      summary: Authenticate a user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.CreateUserOutputDTO'
      summary: Create a new user
      tags:
      - auth
  /roles:
    get:
      description: Get all roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Role'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role with the input payload
      parameters:
      - description: Create Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateRoleInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.CreateRoleOutputDTO'
      security:
      - ApiKeyAuth: []
      summary: Create a new role
      tags:
      - roles
  /roles/{id}:
    delete:
      description: Delete a role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete a role
      tags:
      - roles
    get:
      description: Get a role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Role'
      security:
      - ApiKeyAuth: []
      summary: Get a role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update a role with the input payload
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateRoleInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UpdateRoleOutputDTO'
      security:
      - ApiKeyAuth: []
      summary: Update a role
      tags:
      - roles
  /users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.CreateUserOutputDTO'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CreateUserOutputDTO'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user with the input payload
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UpdateUserOutputDTO'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
